# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.14.5
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# %% [markdown]
# Run topic modeling for each year

# %%

# code generated by ChatGPT

from gensim import corpora
from gensim.models import LdaModel
import pickle
import os


# %%


def perform_topic_modeling(sentences,
                           dictionary,
                           num_topics=5,
                           n_passes=50):

    doc_term_matrix = [
        dictionary.doc2bow(sentence)
        for sentence in sentences
    ]

    # Generate the LDA model
    lda = LdaModel(doc_term_matrix,
                   num_topics=num_topics,
                   id2word=dictionary,
                   passes=n_passes)

    return lda


# %%
# Load the abstracts
datadir = 'data'
ldadir = os.path.join(datadir, 'lda_models')
if not os.path.exists(ldadir):
    os.makedirs(ldadir)

# %%
# first create combined dictionary


dictionary = corpora.Dictionary()
sentences = {}

for year in range(1990, 2023):
    print('loading data for year %s' % year)
    abstract_file = os.path.join(datadir, f'bigrammed_cleaned_abstracts_{year}.pkl')
    if not os.path.exists(abstract_file):
        print('File %s does not exist' % abstract_file)
        continue
    with open(abstract_file, 'rb') as f:
        sentences[year] = pickle.load(f) # [i[0] for i in pickle.load(f)]
    # add all sentences to dictionary
    for sentence in sentences[year]:
        _ = dictionary.doc2bow(sentence, allow_update=True)

dictionary.filter_extremes(no_below=10, no_above=0.1, keep_n=None)
print(f'Number of unique tokens {len(dictionary)}')

# %%

lda_model = {}
ntopics = 10
nwords_to_print = 5

for year in range(1990, 2023):
    if year not in sentences:
        continue
    print('Topic modeling for year %s' % year)

    lda_model[year] = perform_topic_modeling(
        sentences[year], dictionary, num_topics=ntopics)
    lda_model[year].save(
        os.path.join(ldadir, 'lda_model_%s' % year))


# Print topics
    for idx in range(ntopics):
        print("Topic #%s:" % idx,
              lda_model[year].print_topic(idx, nwords_to_print))
